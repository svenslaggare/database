#pragma once
#include <unordered_map>

#include "visitor.h"

struct Table;
struct ColumnStorage;

/**
 * Data generated by the optimizer that must be used
 */
struct QueryExpressionOptimizerData {
	std::unordered_map<std::string, std::size_t> columnIndices;
	std::vector<ColumnStorage*> columnStorage;
};

/**
 * Represents an optimizer for database query expressions
 */
struct QueryExpressionOptimizerVisitor : public QueryExpressionVisitor {
	Table& table;
	QueryExpressionOptimizerData optimizerData;
	std::size_t nextColumnIndex = 0;

	explicit QueryExpressionOptimizerVisitor(Table& table);

	void optimize(QueryExpression* rootExpression);

	virtual void visit(QueryExpression* parent, QueryRootExpression* expression) override;
	virtual void visit(QueryExpression* parent, QueryColumnReferenceExpression* expression) override;
	virtual void visit(QueryExpression* parent, QueryValueExpression* expression) override;
	virtual void visit(QueryExpression* parent, QueryAndExpression* expression) override;
	virtual void visit(QueryExpression* parent, QueryCompareExpression* expression) override;

	virtual void visit(QueryExpression* parent, QueryColumnReferenceSlottedExpression* expression) override;

	virtual void visit(QueryExpression* parent, QueryCompareLeftValueRightColumnExpression* expression) override;
	virtual void visit(QueryExpression* parent, QueryCompareLeftColumnRightValueExpression* expression) override;
	virtual void visit(QueryExpression* parent, QueryCompareLeftColumnRightColumnExpression* expression) override;

	virtual void visit(QueryExpression* parent, QueryCompareLeftValueInt32RightColumnExpression* expression) override;
};